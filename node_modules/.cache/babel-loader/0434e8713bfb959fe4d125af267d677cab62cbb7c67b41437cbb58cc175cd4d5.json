{"ast":null,"code":"var _jsxFileName = \"/Users/anishghumara/git/snakes-and-ladders/src/components/Board.jsx\";\nimport Cell from \"./Cell\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Board({\n  boardSize,\n  curPosition\n}) {\n  const renderBoard = () => {\n    let cellNumber = boardSize * boardSize;\n    let rows = [];\n    for (let i = 0; i < boardSize; i++) {\n      let rowCells = [];\n      for (let j = 0; j < boardSize; j++) {\n        rowCells.push( /*#__PURE__*/_jsxDEV(Cell, {\n          cellNumber: cellNumber,\n          hasPlayer: cellNumber === curPosition\n        }, j + i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 11\n        }, this));\n        cellNumber--;\n      }\n      rows.push( /*#__PURE__*/_jsxDEV(Row, {\n        rowCount: i,\n        children: rowCells\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this));\n    }\n    return rows;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: renderBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["Cell","Row","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","boardSize","curPosition","renderBoard","cellNumber","rows","i","rowCells","j","push","hasPlayer","fileName","_jsxFileName","lineNumber","columnNumber","rowCount","children","className","_c","$RefreshReg$"],"sources":["/Users/anishghumara/git/snakes-and-ladders/src/components/Board.jsx"],"sourcesContent":["import Cell from \"./Cell\";\nimport Row from \"./Row\";\n\nexport default function Board({ boardSize, curPosition }) {\n\n  const renderBoard = () => {\n    let cellNumber = boardSize * boardSize;\n    let rows = [];\n    for (let i = 0; i < boardSize; i++) {\n      let rowCells = [];\n      for (let j = 0; j < boardSize; j++) {\n        rowCells.push(\n          <Cell key={j + i} cellNumber={cellNumber}\n            hasPlayer={cellNumber === curPosition} />\n        );\n        cellNumber--;\n      }\n      rows.push(<Row key={i} rowCount={i}>{rowCells}</Row>);\n    }\n    return rows;\n  }\n\n  return (<>\n    \n    <div className=\"board\">{renderBoard()}</div>\n  </>);\n}\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAOC,GAAG,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExB,eAAe,SAASC,KAAKA,CAAC;EAAEC,SAAS;EAAEC;AAAY,CAAC,EAAE;EAExD,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIC,UAAU,GAAGH,SAAS,GAAGA,SAAS;IACtC,IAAII,IAAI,GAAG,EAAE;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,SAAS,EAAEK,CAAC,EAAE,EAAE;MAClC,IAAIC,QAAQ,GAAG,EAAE;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,SAAS,EAAEO,CAAC,EAAE,EAAE;QAClCD,QAAQ,CAACE,IAAI,eACXZ,OAAA,CAACH,IAAI;UAAaU,UAAU,EAAEA,UAAW;UACvCM,SAAS,EAAEN,UAAU,KAAKF;QAAY,GAD7BM,CAAC,GAAGF,CAAC;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC0B,CAC5C,CAAC;QACDV,UAAU,EAAE;MACd;MACAC,IAAI,CAACI,IAAI,eAACZ,OAAA,CAACF,GAAG;QAASoB,QAAQ,EAAET,CAAE;QAAAU,QAAA,EAAET;MAAQ,GAAzBD,CAAC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA8B,CAAC,CAAC;IACvD;IACA,OAAOT,IAAI;EACb,CAAC;EAED,oBAAQR,OAAA,CAAAE,SAAA;IAAAiB,QAAA,eAENnB,OAAA;MAAKoB,SAAS,EAAC,OAAO;MAAAD,QAAA,EAAEb,WAAW,CAAC;IAAC;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC,gBAC5C,CAAC;AACL;AAACI,EAAA,GAvBuBlB,KAAK;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}