{"ast":null,"code":"var _jsxFileName = \"/Users/anishghumara/my-first-react-app/src/components/Board.jsx\";\nimport Cell from \"./Cell\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board({\n  boardSize,\n  curPosition\n}) {\n  const renderCells = () => {\n    let cellNumber = boardSize * bo;\n    let cellsInRow = Math.sqrt(boardSize);\n    let rows = [];\n    for (let i = 0; i < cellsInRow; i++) {\n      let rowCells = [];\n      for (let j = 0; j < cellsInRow; j++) {\n        rowCells.push( /*#__PURE__*/_jsxDEV(Cell, {\n          cellNumber: cellNumber,\n          hasPlayer: cellNumber === curPosition\n        }, cellNumber, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this));\n        cellNumber--;\n      }\n      rows.push( /*#__PURE__*/_jsxDEV(Row, {\n        rowCount: i,\n        children: rowCells\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this));\n    }\n    return rows;\n  };\n  const renderBoard = () => {\n    renderSnakes();\n    renderCells();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: renderBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["Cell","Row","jsxDEV","_jsxDEV","Board","boardSize","curPosition","renderCells","cellNumber","bo","cellsInRow","Math","sqrt","rows","i","rowCells","j","push","hasPlayer","fileName","_jsxFileName","lineNumber","columnNumber","rowCount","children","renderBoard","renderSnakes","className","_c","$RefreshReg$"],"sources":["/Users/anishghumara/my-first-react-app/src/components/Board.jsx"],"sourcesContent":["import Cell from \"./Cell\";\nimport Row from \"./Row\";\n\nexport default function Board({ boardSize, curPosition }) {\n\n  const renderCells = () => {\n    let cellNumber = boardSize * bo;\n    let cellsInRow = Math.sqrt(boardSize);\n\n    let rows = [];\n    for (let i = 0; i < cellsInRow; i++) {\n      let rowCells = [];\n      for (let j = 0; j < cellsInRow; j++) {\n        rowCells.push(\n          <Cell key={cellNumber} cellNumber={cellNumber} hasPlayer={cellNumber === curPosition} />\n        );\n        cellNumber--;\n      }\n      rows.push(<Row rowCount={i} key={i}>{rowCells}</Row>);\n    }\n    return rows;\n  }\n\n  const renderBoard = () => {\n    renderSnakes();\n    renderCells();\n  };\n\n  return (\n    <div className=\"board\">{renderBoard()}</div>\n  );\n}\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAOC,GAAG,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,eAAe,SAASC,KAAKA,CAAC;EAAEC,SAAS;EAAEC;AAAY,CAAC,EAAE;EAExD,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIC,UAAU,GAAGH,SAAS,GAAGI,EAAE;IAC/B,IAAIC,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACP,SAAS,CAAC;IAErC,IAAIQ,IAAI,GAAG,EAAE;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,EAAEI,CAAC,EAAE,EAAE;MACnC,IAAIC,QAAQ,GAAG,EAAE;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,UAAU,EAAEM,CAAC,EAAE,EAAE;QACnCD,QAAQ,CAACE,IAAI,eACXd,OAAA,CAACH,IAAI;UAAkBQ,UAAU,EAAEA,UAAW;UAACU,SAAS,EAAEV,UAAU,KAAKF;QAAY,GAA1EE,UAAU;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAkE,CACzF,CAAC;QACDd,UAAU,EAAE;MACd;MACAK,IAAI,CAACI,IAAI,eAACd,OAAA,CAACF,GAAG;QAACsB,QAAQ,EAAET,CAAE;QAAAU,QAAA,EAAUT;MAAQ,GAAZD,CAAC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAAC,CAAC;IACvD;IACA,OAAOT,IAAI;EACb,CAAC;EAED,MAAMY,WAAW,GAAGA,CAAA,KAAM;IACxBC,YAAY,CAAC,CAAC;IACdnB,WAAW,CAAC,CAAC;EACf,CAAC;EAED,oBACEJ,OAAA;IAAKwB,SAAS,EAAC,OAAO;IAAAH,QAAA,EAAEC,WAAW,CAAC;EAAC;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAEhD;AAACM,EAAA,GA5BuBxB,KAAK;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}