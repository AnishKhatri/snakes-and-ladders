{"ast":null,"code":"var _jsxFileName = \"/Users/anishghumara/my-first-react-app/src/components/Board.jsx\";\nimport Cell from \"./Cell\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  boardSize,\n  curPosition\n}) {\n  const renderBoard = () => {\n    let cellNumber = boardSize;\n    let halfBoardSize = Math.sqrt(boardSize);\n    let rows = [];\n    for (let i = 0; i < halfBoardSize; i++) {\n      let rowCells = [];\n      for (let j = 0; j < halfBoardSize; j++) {\n        debugger;\n        console.log(\"cell: \", cellNumber);\n        rowCells.push( /*#__PURE__*/_jsxDEV(Cell, {\n          cellNumber: cellNumber,\n          hasPlayer: cellNumber === curPosition\n        }, cellNumber, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this));\n        cellNumber--;\n      }\n      rows.push( /*#__PURE__*/_jsxDEV(Row, {\n        rowCount: i,\n        children: rowCells\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this));\n    }\n    return rows;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: renderBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["Cell","Row","jsxDEV","_jsxDEV","Board","boardSize","curPosition","renderBoard","cellNumber","halfBoardSize","Math","sqrt","rows","i","rowCells","j","console","log","push","hasPlayer","fileName","_jsxFileName","lineNumber","columnNumber","rowCount","children","className","_c","$RefreshReg$"],"sources":["/Users/anishghumara/my-first-react-app/src/components/Board.jsx"],"sourcesContent":["import Cell from \"./Cell\";\nimport Row from \"./Row\";\n\nfunction Board({ boardSize, curPosition }) {\n\n  const renderBoard = () => {\n    let cellNumber = boardSize;\n    let halfBoardSize = Math.sqrt(boardSize);\n\n    let rows = [];\n    for (let i = 0; i < halfBoardSize; i++) {\n      let rowCells = [];\n      for (let j = 0; j < halfBoardSize; j++) {\n        debugger\n        console.log(\"cell: \", cellNumber);\n        rowCells.push(\n          <Cell key={cellNumber} cellNumber={cellNumber} hasPlayer={cellNumber === curPosition} />\n        );\n        cellNumber--;\n      }\n      rows.push(<Row rowCount={i} key={i} >{rowCells}</Row>);\n    }\n    return rows;\n  };\n\n  return (\n    <div className=\"board\">{renderBoard()}</div>\n  );\n}\n\nexport default Board;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAOC,GAAG,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,KAAKA,CAAC;EAAEC,SAAS;EAAEC;AAAY,CAAC,EAAE;EAEzC,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIC,UAAU,GAAGH,SAAS;IAC1B,IAAII,aAAa,GAAGC,IAAI,CAACC,IAAI,CAACN,SAAS,CAAC;IAExC,IAAIO,IAAI,GAAG,EAAE;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,aAAa,EAAEI,CAAC,EAAE,EAAE;MACtC,IAAIC,QAAQ,GAAG,EAAE;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,aAAa,EAAEM,CAAC,EAAE,EAAE;QACtC;QACAC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAET,UAAU,CAAC;QACjCM,QAAQ,CAACI,IAAI,eACXf,OAAA,CAACH,IAAI;UAAkBQ,UAAU,EAAEA,UAAW;UAACW,SAAS,EAAEX,UAAU,KAAKF;QAAY,GAA1EE,UAAU;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAkE,CACzF,CAAC;QACDf,UAAU,EAAE;MACd;MACAI,IAAI,CAACM,IAAI,eAACf,OAAA,CAACF,GAAG;QAACuB,QAAQ,EAAEX,CAAE;QAAAY,QAAA,EAAWX;MAAQ,GAAbD,CAAC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkB,CAAC,CAAC;IACxD;IACA,OAAOX,IAAI;EACb,CAAC;EAED,oBACET,OAAA;IAAKuB,SAAS,EAAC,OAAO;IAAAD,QAAA,EAAElB,WAAW,CAAC;EAAC;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAEhD;AAACI,EAAA,GAzBQvB,KAAK;AA2Bd,eAAeA,KAAK;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}