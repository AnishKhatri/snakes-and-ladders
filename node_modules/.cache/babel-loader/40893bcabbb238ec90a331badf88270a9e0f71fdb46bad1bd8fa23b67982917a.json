{"ast":null,"code":"var _jsxFileName = \"/Users/anishghumara/my-first-react-app/src/components/Board.jsx\";\nimport Cell from \"./Cell\";\nimport Row from \"./Row\";\nimport Snakes from \"../data/snakes-data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board({\n  boardSize,\n  snakes,\n  curPosition\n}) {\n  const renderBoard = () => {\n    let cellNumber = boardSize * boardSize;\n    let rows = [];\n    for (let i = 0; i < boardSize; i++) {\n      let rowCells = [];\n      for (let j = 0; j < boardSize; j++) {\n        rowCells.push( /*#__PURE__*/_jsxDEV(Cell, {\n          cellNumber: cellNumber,\n          snakes: snakes,\n          hasPlayer: cellNumber === curPosition\n        }, j + i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }, this));\n        cellNumber--;\n      }\n      rows.push( /*#__PURE__*/_jsxDEV(Row, {\n        rowCount: i,\n        children: rowCells\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this));\n    }\n    return rows;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: renderBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["Cell","Row","Snakes","jsxDEV","_jsxDEV","Board","boardSize","snakes","curPosition","renderBoard","cellNumber","rows","i","rowCells","j","push","hasPlayer","fileName","_jsxFileName","lineNumber","columnNumber","rowCount","children","className","_c","$RefreshReg$"],"sources":["/Users/anishghumara/my-first-react-app/src/components/Board.jsx"],"sourcesContent":["import Cell from \"./Cell\";\nimport Row from \"./Row\";\nimport Snakes from \"../data/snakes-data\";\n\nexport default function Board({ boardSize, snakes, curPosition }) {\n\n  const renderBoard = () => {\n    let cellNumber = boardSize * boardSize;\n    let rows = [];\n    for (let i = 0; i < boardSize; i++) {\n      let rowCells = [];\n      for (let j = 0; j < boardSize; j++) {\n        rowCells.push(\n          <Cell key={j + i} cellNumber={cellNumber} snakes={snakes}\n            hasPlayer={cellNumber === curPosition} />\n        );\n        cellNumber--;\n      }\n      rows.push(<Row key={i} rowCount={i}>{rowCells}</Row>);\n    }\n    return rows;\n  }\n\n  return (\n    <div className=\"board\">{renderBoard()}</div>\n  );\n}\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,eAAe,SAASC,KAAKA,CAAC;EAAEC,SAAS;EAAEC,MAAM;EAAEC;AAAY,CAAC,EAAE;EAEhE,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIC,UAAU,GAAGJ,SAAS,GAAGA,SAAS;IACtC,IAAIK,IAAI,GAAG,EAAE;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,SAAS,EAAEM,CAAC,EAAE,EAAE;MAClC,IAAIC,QAAQ,GAAG,EAAE;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,SAAS,EAAEQ,CAAC,EAAE,EAAE;QAClCD,QAAQ,CAACE,IAAI,eACXX,OAAA,CAACJ,IAAI;UAAaU,UAAU,EAAEA,UAAW;UAACH,MAAM,EAAEA,MAAO;UACvDS,SAAS,EAAEN,UAAU,KAAKF;QAAY,GAD7BM,CAAC,GAAGF,CAAC;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC0B,CAC5C,CAAC;QACDV,UAAU,EAAE;MACd;MACAC,IAAI,CAACI,IAAI,eAACX,OAAA,CAACH,GAAG;QAASoB,QAAQ,EAAET,CAAE;QAAAU,QAAA,EAAET;MAAQ,GAAzBD,CAAC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA8B,CAAC,CAAC;IACvD;IACA,OAAOT,IAAI;EACb,CAAC;EAED,oBACEP,OAAA;IAAKmB,SAAS,EAAC,OAAO;IAAAD,QAAA,EAAEb,WAAW,CAAC;EAAC;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAEhD;AAACI,EAAA,GAtBuBnB,KAAK;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}